// Давайте взглянем на конкретный пример:
// let sum = (a, b) => a + b;
//
// /* Более короткая форма для:
//
// let sum = function(a, b) {
//   return a + b;
// };
// */
//
// alert( sum(1, 2) ); // 3



// тоже что и
// let double = function(n) { return n * 2 }
// let double = n => n * 2;
//
// alert( double(3) ); // 6



// Если нет аргументов, указываются пустые круглые скобки:
// let sayHi = () => alert("Hello!");
//
// sayHi();

// Функции-стрелки могут быть использованы так же, как и Function Expression.
//
// Например, для динамического создания функции:
//
// let age = prompt("Сколько Вам лет?", 18);
//
// let welcome = (age < 18) ?
//   () => alert('Привет') :
//   () => alert("Здравствуйте!");
//
// welcome(); // теперь всё в порядке



// Порой нам нужно что-то посложнее, например, выполнить несколько инструкций. Это также возможно, нужно лишь заключить инструкции в фигурные скобки. И использовать return внутри них, как в обычной функции.
//
// Например:
// let sum = (a, b) => {  // фигурная скобка, открывающая тело многострочной функции
//   let result = a + b;
//   return result; // при фигурных скобках для возврата значения нужно явно вызвать return
// };
//
// alert( sum(1, 2) ); // 3



// Замените код Function Expression стрелочной функцией:
// function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
// }
//
// ask(
//   "Вы согласны?",
//   function() { alert("Вы согласились."); },
//   function() { alert("Вы отменили выполнение."); }
// );


// function ask(question, yes, no) {
//   if (confirm(question)) yes()
//   else no();
// }
//
// ask(
//   "Вы согласны?",
//   () => alert("Вы согласились."),
//   () => alert("Вы отменили выполнение.")
// );
